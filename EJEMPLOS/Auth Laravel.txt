https://dev.to/kingsconsult/laravel-8-auth-registration-and-login-32jl
https://styde.net/laravel-6-doc-autenticacion/ 
https://cvallejo.medium.com/autenticaci%C3%B3n-y-manejo-de-roles-de-usuarios-en-laravel-7-50aa79fa1bed
https://styde.net/desactivar-y-personalizar-la-url-de-registro-en-laravel/


Uno de los primeros pasos que frecuentemente hacemos cuando instalamos un proyecto de Laravel es configurar el frontend para el registro y autenticación de usuarios de la aplicación, usando lo que viene por defecto en el framework. Sin embargo, en Laravel 6 cuando ejecutamos el comando php artisan make:auth nos dice que el comando no está definido (Command «make:auth» is not defined). Así que en este tutorial hablaremos con detalle de este cambio en el framework y cómo podemos volver a tener esta funcionalidad en la aplicación.

A partir de Laravel 6 no decidirá por ti con cuál pre-procesador y framework de Javascript y CSS trabajar en tu aplicación. Es por ello que fue movida toda la funcionalidad para el frontend (scaffolding) que venía por defecto (Bootstrap y Vue) en el framework a un nuevo paquete Composer oficial llamado laravel/ui.


Uno de los primeros pasos que frecuentemente hacemos cuando instalamos un proyecto de Laravel es configurar el frontend para el registro y autenticación de usuarios de la aplicación, usando lo que viene por defecto en el framework. Sin embargo, en Laravel 6 cuando ejecutamos el comando php artisan make:auth nos dice que el comando no está definido (Command «make:auth» is not defined). Así que en este tutorial hablaremos con detalle de este cambio en el framework y cómo podemos volver a tener esta funcionalidad en la aplicación.

A partir de Laravel 6 no decidirá por ti con cuál pre-procesador y framework de Javascript y CSS trabajar en tu aplicación. Es por ello que fue movida toda la funcionalidad para el frontend (scaffolding) que venía por defecto (Bootstrap y Vue) en el framework a un nuevo paquete Composer oficial llamado laravel/ui.

Para volver a tener la funcionalidad vamos a instalar el nuevo paquete ejecutando:

Después de crear el proyecto con normalidad entramos dentro de la carpeta y:
composer require laravel/ui

Con ellos ya tendremos disponible los comandos Artisan.

Hacemos un php artisan migrate de las migrations que vienen por defecto:
php artisan migrate
Antes debemos asociar la BD.

Para agrega la configuración básica solo tenemos que ejecutar uno de estos 3 comandos:

#
php artisan ui bootstrap
php artisan ui vue
php artisan ui react

Para agregar la configuración básica incluyendo las vistas para registro y autenticación de usuarios, debemos indicar la opción de --auth al comando correspondiente:

#
php artisan ui bootstrap --auth
php artisan ui vue --auth
php artisan ui react --auth

Esta es solo una configuración básica que puedes modificarla según las necesidades de tu proyecto, removiendo o agregando nuevos paquetes a tu archivo package.json

Luego, debes instalar los paquetes NPM con:

npm install  --> Me genera rutas, controladores... todo lo necesario para la auutenticación y registro.

Finalmente, a través de las instrucciones del archivo webpack.mix.js Webpack compilará tanto los archivos Sass para convertirlos a CSS plano así como el archivo resources/js/app.js, al ejecutar:

npm run dev  --> Lo ejecutaremos dos veces.

Listo, volvemos a tener la funcionalidad en nuestra aplicación. La ventaja de esta separación a un paquete Composer es abrir la posibilidad de algún momento tener diferentes opciones de frontend para nuestros proyectos sin necesidad de actualizar el framework completo. ¡Esperemos así sea!


sudo npm cache clean -f
sudo npm install -g n
sudo n stable

vendor/laravel/framework/src/Illuminate/Routing/Router.php)

Orden de explicación:
- explicar rutas.
- explicar controladores con el middleware 'auth'.
- ir a la vista y ver al usuario con {{ Auth::user()}}  --> Auth::user devuelve un objeto tipo User. Admite cosas como: Auth::user()->rolesQuetiene(Auth::user()->id)
                    <?php 
                    if (Auth::check()){
                        $u = Auth::user();
                        echo '<br>'.$u->name;
                    }
- explicar como podemos cambiar el nombre de las rutasa español.                   
- mirar el modelo User y explicar el validator (ver en la vista las etiquetas @error).
- añadir un par de rutas y proteger una con el mid auth y la otra no. Probar qué hace.
- recordar como se aplican los mid.
